version: '3.8'

services:
  # PHP Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hotel_app
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV}
      - CONTAINER_ROLE=app
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - hotel_network
    depends_on:
      - mysql
      - redis

  # Nginx Service
  nginx:
    image: nginx:alpine
    container_name: hotel_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - .:/var/www/html
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
      - ./docker/nginx/ssl/:/etc/nginx/ssl/
    networks:
      - hotel_network
    depends_on:
      - app

  # MySQL Service
  mysql:
    image: mysql:8.0
    container_name: hotel_mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - hotel_network

  # Redis Service
  redis:
    image: redis:alpine
    container_name: hotel_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hotel_network

  # Queue Worker
  queue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hotel_queue
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV}
      - CONTAINER_ROLE=queue
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
    networks:
      - hotel_network
    depends_on:
      - app
      - mysql
      - redis

  # Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hotel_scheduler
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV}
      - CONTAINER_ROLE=scheduler
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
    networks:
      - hotel_network
    depends_on:
      - app
      - mysql
      - redis

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog
    container_name: hotel_mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - hotel_network

networks:
  hotel_network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local 